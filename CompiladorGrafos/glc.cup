package com.desenvolvimento;
import java_cup.runtime.*;
import com.desenvolvimento.Grafo;
import com.desenvolvimento.GerenciadorErros;

parser code {:
    public Grafo meuGrafo = new Grafo();
    private GerenciadorErros gerenciador;

    public Parser(Yylex lexer, GerenciadorErros gerenciador) {
        super(lexer);
        this.gerenciador = gerenciador;
    }

    public void syntax_error(Symbol cur_token) {
        String mensagem = "Token inesperado '" + cur_token.value + "'. Era esperado um comando como 'vertex', 'edge' ou 'print'.";
        gerenciador.addErro("Sintático", cur_token.left, cur_token.right, mensagem);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        String mensagem = "Erro de sintaxe fatal. Não foi possível continuar a análise.";
        gerenciador.addErro("Fatal", cur_token.left, cur_token.right, mensagem);
    }
:};

terminal KW_GRAPH, KW_VERTEX, KW_EDGE, KW_PRINT, KW_ADJACENCY;
terminal KW_DIRECTED, KW_UNDIRECTED;
terminal SYM_ARROW_DIR, SYM_ARROW_UNDIR;
terminal String ID;

non terminal program, graph_body, type_definition, command_list;
non terminal command, vertex_declaration, edge_declaration, print_command;
non terminal String arrow;

start with program;

program ::=
    KW_GRAPH graph_body;

graph_body ::=
    type_definition command_list;

type_definition ::=
    KW_DIRECTED:tipo      {: parser.meuGrafo.setTipo("directed"); :}
    | KW_UNDIRECTED:tipo  {: parser.meuGrafo.setTipo("undirected"); :};

command_list ::=
    command_list command
    | command;

command ::=
    vertex_declaration
    | edge_declaration
    | print_command
    | error;

vertex_declaration ::=
    KW_VERTEX ID:nome {:
        parser.meuGrafo.addVertice(nome);
    :};

edge_declaration ::=
    KW_EDGE ID:v1 arrow:tipoAresta ID:v2 {:
        if (parser.meuGrafo.getTipo() == null) {
             parser.gerenciador.addErro("Semântico", v1left, v1right, "Tipo do grafo não foi definido antes de criar arestas.");
        } else if (!parser.meuGrafo.getTipo().equals(tipoAresta)) {
            parser.gerenciador.addErro("Semântico", v1left, v1right, "Tipo de aresta incompatível. O grafo é '" + parser.meuGrafo.getTipo() + "'.");
        } else if (parser.meuGrafo.verticeExiste(v1) && parser.meuGrafo.verticeExiste(v2)) {
            if (!parser.meuGrafo.addAresta(v1, v2)) {
                parser.gerenciador.addErro("Semântico", v1left, v1right, "Aresta duplicada entre '" + v1 + "' e '" + v2 + "'.");
            }
        } else {
            parser.gerenciador.addErro("Semântico", v1left, v1right, "Tentativa de criar aresta com vértice não declarado.");
        }
    :};

arrow ::=
    SYM_ARROW_DIR   {: RESULT = "directed"; :}
    | SYM_ARROW_UNDIR {: RESULT = "undirected"; :};

print_command ::=
    KW_PRINT KW_ADJACENCY {:
        parser.meuGrafo.imprimirMatrizAdjacencia("matriz_adjacencia.txt");
    :};